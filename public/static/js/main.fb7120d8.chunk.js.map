{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Items","itemKey","detail","App","props","state","userData","currency","amount","reference","metadata","JSON","stringify","authorization","metaDataError","e","this","setState","message","Object","entries","map","key","index","window","addEventListener","handelEvent","bind","metaDataErrorEvent","id","method","action","className","disabled","type","onChange","target","value","name","style","color","height","width","borderColor","important","createTable","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fb7120d8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction Items({itemKey, detail }) {\n  return (<tr>\n    <td>{itemKey}</td>\n    <td>{detail}</td>\n  </tr>);\n}\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: '',\n      currency: 'EGP',\n      amount: 0,\n      reference: 'ORD-5023-4E89',\n      metadata: JSON.stringify({\n        \"udf1\": \"TEST123\",\n        \"coupon_code\": \"NY2018\",\n        \"partner_id\": 123989\n      }),\n      authorization: 'Secret Key',\n      metaDataError: ''\n    }\n  }\n\n  handelEvent(e) {\n    const { detail } = e;\n    this.setState({userData: detail})\n  }\n\n  metaDataErrorEvent(e) {\n    const { detail } = e;\n    const { message } = detail;\n    this.setState({metaDataError: message})\n  }\n\n  createTable(detail) {\n    return Object.entries(detail).map((key, index) => {\n      return <Items key={index} itemKey={key[0]} detail={JSON.stringify(detail[key[0]])} />;\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('onUserData', this.handelEvent.bind(this));\n    window.addEventListener('metaDataError', this.metaDataErrorEvent.bind(this));\n  }\n\n  render() {\n    return (\n      <div>\n        <form id=\"payment-form\" method=\"POST\" action=\"https://merchant.com/charge-card\">\n          <div className=\"one-liner\">\n            <div className=\"card-frame\">\n            </div>\n            <button id=\"pay-button\" disabled>\n              PAY {this.state.amount} {this.state.currency}\n          </button>\n          </div>\n          <hr />\n          <div>\n              \n                <label>Amount: </label>\n                <input className=\"input-group-text\" id=\"amount\" type=\"number\" onChange={e => this.setState({ amount: e.target.value })} value={this.state.amount}></input>\n              \n                <br />\n                <label>Currency: </label>\n            {/* <input className=\"input-group-text\" id=\"currency\" type=\"text\" onChange={e => this.setState({currency: e.target.value})} value={this.state.currency}></input> */}\n                {/* <div className=\"selectWrapper\"> */}\n                  <select className=\"custom-select\" id=\"currency\" name=\"\" onChange={e => this.setState({currency: e.target.value})} value={this.state.currency}>\n                    <option value=\"USD\">United States Dollars</option>\n                    <option value=\"EUR\">Euro</option>\n                    <option value=\"GBP\">United Kingdom Pounds</option>\n                    <option value=\"DZD\">Algeria Dinars</option>\n                    <option value=\"ARP\">Argentina Pesos</option>\n                    <option value=\"AUD\">Australia Dollars</option>\n                    <option value=\"ATS\">Austria Schillings</option>\n                    <option value=\"BSD\">Bahamas Dollars</option>\n                    <option value=\"BBD\">Barbados Dollars</option>\n                    <option value=\"BEF\">Belgium Francs</option>\n                    <option value=\"BMD\">Bermuda Dollars</option>\n                    <option value=\"BRR\">Brazil Real</option>\n                    <option value=\"BGL\">Bulgaria Lev</option>\n                    <option value=\"CAD\">Canada Dollars</option>\n                    <option value=\"CLP\">Chile Pesos</option>\n                    <option value=\"CNY\">China Yuan Renmimbi</option>\n                    <option value=\"CYP\">Cyprus Pounds</option>\n                    <option value=\"CSK\">Czech Republic Koruna</option>\n                    <option value=\"DKK\">Denmark Kroner</option>\n                    <option value=\"NLG\">Dutch Guilders</option>\n                    <option value=\"XCD\">Eastern Caribbean Dollars</option>\n                    <option value=\"EGP\">Egypt Pounds</option>\n                    <option value=\"FJD\">Fiji Dollars</option>\n                    <option value=\"FIM\">Finland Markka</option>\n                    <option value=\"FRF\">France Francs</option>\n                    <option value=\"DEM\">Germany Deutsche Marks</option>\n                    <option value=\"XAU\">Gold Ounces</option>\n                    <option value=\"GRD\">Greece Drachmas</option>\n                    <option value=\"HKD\">Hong Kong Dollars</option>\n                    <option value=\"HUF\">Hungary Forint</option>\n                    <option value=\"ISK\">Iceland Krona</option>\n                    <option value=\"INR\">India Rupees</option>\n                    <option value=\"IDR\">Indonesia Rupiah</option>\n                    <option value=\"IEP\">Ireland Punt</option>\n                    <option value=\"ILS\">Israel New Shekels</option>\n                    <option value=\"ITL\">Italy Lira</option>\n                    <option value=\"JMD\">Jamaica Dollars</option>\n                    <option value=\"JPY\">Japan Yen</option>\n                    <option value=\"JOD\">Jordan Dinar</option>\n                    <option value=\"KRW\">Korea (South) Won</option>\n                    <option value=\"LBP\">Lebanon Pounds</option>\n                    <option value=\"LUF\">Luxembourg Francs</option>\n                    <option value=\"MYR\">Malaysia Ringgit</option>\n                    <option value=\"MXP\">Mexico Pesos</option>\n                    <option value=\"NLG\">Netherlands Guilders</option>\n                    <option value=\"NZD\">New Zealand Dollars</option>\n                    <option value=\"NOK\">Norway Kroner</option>\n                    <option value=\"PKR\">Pakistan Rupees</option>\n                    <option value=\"XPD\">Palladium Ounces</option>\n                    <option value=\"PHP\">Philippines Pesos</option>\n                    <option value=\"XPT\">Platinum Ounces</option>\n                    <option value=\"PLZ\">Poland Zloty</option>\n                    <option value=\"PTE\">Portugal Escudo</option>\n                    <option value=\"ROL\">Romania Leu</option>\n                    <option value=\"RUR\">Russia Rubles</option>\n                    <option value=\"SAR\">Saudi Arabia Riyal</option>\n                    <option value=\"XAG\">Silver Ounces</option>\n                    <option value=\"SGD\">Singapore Dollars</option>\n                    <option value=\"SKK\">Slovakia Koruna</option>\n                    <option value=\"ZAR\">South Africa Rand</option>\n                    <option value=\"KRW\">South Korea Won</option>\n                    <option value=\"ESP\">Spain Pesetas</option>\n                    <option value=\"XDR\">Special Drawing Right (IMF)</option>\n                    <option value=\"SDD\">Sudan Dinar</option>\n                    <option value=\"SEK\">Sweden Krona</option>\n                    <option value=\"CHF\">Switzerland Francs</option>\n                    <option value=\"TWD\">Taiwan Dollars</option>\n                    <option value=\"THB\">Thailand Baht</option>\n                    <option value=\"TTD\">Trinidad and Tobago Dollars</option>\n                    <option value=\"TRL\">Turkey Lira</option>\n                    <option value=\"VEB\">Venezuela Bolivar</option>\n                    <option value=\"ZMK\">Zambia Kwacha</option>\n                    <option value=\"EUR\">Euro</option>\n                    <option value=\"XCD\">Eastern Caribbean Dollars</option>\n                    <option value=\"XDR\">Special Drawing Right (IMF)</option>\n                    <option value=\"XAG\">Silver Ounces</option>\n                    <option value=\"XAU\">Gold Ounces</option>\n                    <option value=\"XPD\">Palladium Ounces</option>\n                    <option value=\"XPT\">Platinum Ounces</option>\n                  </select>\n              \n                {/* </div> */}\n                <br />\n                <label>Reference: </label>\n                <input className=\"input-group-text\" id=\"reference\" type=\"text\" onChange={e => this.setState({ reference: e.target.value })} value={this.state.reference}></input>\n              \n              \n              <label style={this.state.metaDataError ? {color: 'red'} : {}}>Metadata: </label>\n                <input className=\"input-group-text\" style={this.state.metaDataError ? { height: '50px', width: '500px', borderColor: 'red', important: 'true'} : { height: '50px', width: '500px' }} id=\"metadata\" type=\"text\" onChange={e => this.setState({ metadata: e.target.value })} value={this.state.metadata}></input>\n            \n            <p style={{ color: 'red' }}>{this.state.metaDataError}</p>\n              \n                <label>Authorization: </label>\n                <input className=\"input-group-text\" id=\"authorization\" type=\"text\" onChange={e => this.setState({ authorization: e.target.value })} value={this.state.authorization}></input>\n            </div>\n          <p className=\"success-payment-message\"></p>\n        </form>\n        <p>User Data Will be bllow!</p>\n        {this.state.userData ? <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Key</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.createTable(this.state.userData)}\n          </tbody>\n        </table> : ''}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}